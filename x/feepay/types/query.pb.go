// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: haneul/feepay/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryFeePayContractRequest retrieves a single fee pay contract
type QueryFeePayContractRequest struct {
	// contract_address defines the address of the fee pay contract
	ContractAddress string `protobuf:"bytes,1,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
}

func (m *QueryFeePayContractRequest) Reset()         { *m = QueryFeePayContractRequest{} }
func (m *QueryFeePayContractRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFeePayContractRequest) ProtoMessage()    {}
func (*QueryFeePayContractRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ef2f83d0376fbf8, []int{0}
}
func (m *QueryFeePayContractRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFeePayContractRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFeePayContractRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFeePayContractRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFeePayContractRequest.Merge(m, src)
}
func (m *QueryFeePayContractRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFeePayContractRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFeePayContractRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFeePayContractRequest proto.InternalMessageInfo

func (m *QueryFeePayContractRequest) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

// QueryFeePayContractResponse defines the response for retrieving a single fee pay contract
type QueryFeePayContractResponse struct {
	// contract defines the fee pay contract
	FeePayContract FeePayContract `protobuf:"bytes,1,opt,name=fee_pay_contract,json=feePayContract,proto3" json:"fee_pay_contract"`
}

func (m *QueryFeePayContractResponse) Reset()         { *m = QueryFeePayContractResponse{} }
func (m *QueryFeePayContractResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFeePayContractResponse) ProtoMessage()    {}
func (*QueryFeePayContractResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ef2f83d0376fbf8, []int{1}
}
func (m *QueryFeePayContractResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFeePayContractResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFeePayContractResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFeePayContractResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFeePayContractResponse.Merge(m, src)
}
func (m *QueryFeePayContractResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFeePayContractResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFeePayContractResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFeePayContractResponse proto.InternalMessageInfo

func (m *QueryFeePayContractResponse) GetFeePayContract() FeePayContract {
	if m != nil {
		return m.FeePayContract
	}
	return FeePayContract{}
}

// Message for querying a list of fee pay contracts
type QueryFeePayContractsRequest struct {
	// Pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryFeePayContractsRequest) Reset()         { *m = QueryFeePayContractsRequest{} }
func (m *QueryFeePayContractsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFeePayContractsRequest) ProtoMessage()    {}
func (*QueryFeePayContractsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ef2f83d0376fbf8, []int{2}
}
func (m *QueryFeePayContractsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFeePayContractsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFeePayContractsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFeePayContractsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFeePayContractsRequest.Merge(m, src)
}
func (m *QueryFeePayContractsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFeePayContractsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFeePayContractsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFeePayContractsRequest proto.InternalMessageInfo

func (m *QueryFeePayContractsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// The response for querying all fee pay contracts
type QueryFeePayContractsResponse struct {
	// A slice of all the stored fee pay contracts
	FeePayContracts []FeePayContract `protobuf:"bytes,1,rep,name=fee_pay_contracts,json=feePayContracts,proto3" json:"fee_pay_contracts"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryFeePayContractsResponse) Reset()         { *m = QueryFeePayContractsResponse{} }
func (m *QueryFeePayContractsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFeePayContractsResponse) ProtoMessage()    {}
func (*QueryFeePayContractsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ef2f83d0376fbf8, []int{3}
}
func (m *QueryFeePayContractsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFeePayContractsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFeePayContractsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFeePayContractsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFeePayContractsResponse.Merge(m, src)
}
func (m *QueryFeePayContractsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFeePayContractsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFeePayContractsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFeePayContractsResponse proto.InternalMessageInfo

func (m *QueryFeePayContractsResponse) GetFeePayContracts() []FeePayContract {
	if m != nil {
		return m.FeePayContracts
	}
	return nil
}

func (m *QueryFeePayContractsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// Message for querying the number of uses on a fee pay contract by wallet
type QueryFeePayContractUsesRequest struct {
	// The contract address.
	ContractAddress string `protobuf:"bytes,1,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	// The wallet address.
	WalletAddress string `protobuf:"bytes,2,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
}

func (m *QueryFeePayContractUsesRequest) Reset()         { *m = QueryFeePayContractUsesRequest{} }
func (m *QueryFeePayContractUsesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFeePayContractUsesRequest) ProtoMessage()    {}
func (*QueryFeePayContractUsesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ef2f83d0376fbf8, []int{4}
}
func (m *QueryFeePayContractUsesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFeePayContractUsesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFeePayContractUsesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFeePayContractUsesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFeePayContractUsesRequest.Merge(m, src)
}
func (m *QueryFeePayContractUsesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFeePayContractUsesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFeePayContractUsesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFeePayContractUsesRequest proto.InternalMessageInfo

func (m *QueryFeePayContractUsesRequest) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

func (m *QueryFeePayContractUsesRequest) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

// The response for querying the number of uses on a fee pay contract by wallet
type QueryFeePayContractUsesResponse struct {
	// The number of uses on the fee pay contract by wallet
	Uses uint64 `protobuf:"varint,1,opt,name=uses,proto3" json:"uses,omitempty"`
}

func (m *QueryFeePayContractUsesResponse) Reset()         { *m = QueryFeePayContractUsesResponse{} }
func (m *QueryFeePayContractUsesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFeePayContractUsesResponse) ProtoMessage()    {}
func (*QueryFeePayContractUsesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ef2f83d0376fbf8, []int{5}
}
func (m *QueryFeePayContractUsesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFeePayContractUsesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFeePayContractUsesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFeePayContractUsesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFeePayContractUsesResponse.Merge(m, src)
}
func (m *QueryFeePayContractUsesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFeePayContractUsesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFeePayContractUsesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFeePayContractUsesResponse proto.InternalMessageInfo

func (m *QueryFeePayContractUsesResponse) GetUses() uint64 {
	if m != nil {
		return m.Uses
	}
	return 0
}

// Message for querying if a wallet is eligible for fee pay contract interactions
type QueryFeePayWalletIsEligibleRequest struct {
	// The contract address.
	ContractAddress string `protobuf:"bytes,1,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	// The wallet address.
	WalletAddress string `protobuf:"bytes,2,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
}

func (m *QueryFeePayWalletIsEligibleRequest) Reset()         { *m = QueryFeePayWalletIsEligibleRequest{} }
func (m *QueryFeePayWalletIsEligibleRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFeePayWalletIsEligibleRequest) ProtoMessage()    {}
func (*QueryFeePayWalletIsEligibleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ef2f83d0376fbf8, []int{6}
}
func (m *QueryFeePayWalletIsEligibleRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFeePayWalletIsEligibleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFeePayWalletIsEligibleRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFeePayWalletIsEligibleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFeePayWalletIsEligibleRequest.Merge(m, src)
}
func (m *QueryFeePayWalletIsEligibleRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFeePayWalletIsEligibleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFeePayWalletIsEligibleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFeePayWalletIsEligibleRequest proto.InternalMessageInfo

func (m *QueryFeePayWalletIsEligibleRequest) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

func (m *QueryFeePayWalletIsEligibleRequest) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

// The response for querying if a wallet is eligible for fee pay contract interactions
type QueryFeePayWalletIsEligibleResponse struct {
	// The eligibility of the wallet for fee pay contract interactions
	Eligible bool `protobuf:"varint,1,opt,name=eligible,proto3" json:"eligible,omitempty"`
}

func (m *QueryFeePayWalletIsEligibleResponse) Reset()         { *m = QueryFeePayWalletIsEligibleResponse{} }
func (m *QueryFeePayWalletIsEligibleResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFeePayWalletIsEligibleResponse) ProtoMessage()    {}
func (*QueryFeePayWalletIsEligibleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ef2f83d0376fbf8, []int{7}
}
func (m *QueryFeePayWalletIsEligibleResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFeePayWalletIsEligibleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFeePayWalletIsEligibleResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFeePayWalletIsEligibleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFeePayWalletIsEligibleResponse.Merge(m, src)
}
func (m *QueryFeePayWalletIsEligibleResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFeePayWalletIsEligibleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFeePayWalletIsEligibleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFeePayWalletIsEligibleResponse proto.InternalMessageInfo

func (m *QueryFeePayWalletIsEligibleResponse) GetEligible() bool {
	if m != nil {
		return m.Eligible
	}
	return false
}

// QueryParamsRequest is the request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ef2f83d0376fbf8, []int{8}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is the response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params is the returned Feepay parameter
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ef2f83d0376fbf8, []int{9}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func init() {
	proto.RegisterType((*QueryFeePayContractRequest)(nil), "haneul.feepay.v1.QueryFeePayContractRequest")
	proto.RegisterType((*QueryFeePayContractResponse)(nil), "haneul.feepay.v1.QueryFeePayContractResponse")
	proto.RegisterType((*QueryFeePayContractsRequest)(nil), "haneul.feepay.v1.QueryFeePayContractsRequest")
	proto.RegisterType((*QueryFeePayContractsResponse)(nil), "haneul.feepay.v1.QueryFeePayContractsResponse")
	proto.RegisterType((*QueryFeePayContractUsesRequest)(nil), "haneul.feepay.v1.QueryFeePayContractUsesRequest")
	proto.RegisterType((*QueryFeePayContractUsesResponse)(nil), "haneul.feepay.v1.QueryFeePayContractUsesResponse")
	proto.RegisterType((*QueryFeePayWalletIsEligibleRequest)(nil), "haneul.feepay.v1.QueryFeePayWalletIsEligibleRequest")
	proto.RegisterType((*QueryFeePayWalletIsEligibleResponse)(nil), "haneul.feepay.v1.QueryFeePayWalletIsEligibleResponse")
	proto.RegisterType((*QueryParamsRequest)(nil), "haneul.feepay.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "haneul.feepay.v1.QueryParamsResponse")
}

func init() { proto.RegisterFile("haneul/feepay/v1/query.proto", fileDescriptor_3ef2f83d0376fbf8) }

var fileDescriptor_3ef2f83d0376fbf8 = []byte{
	// 759 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x56, 0x4f, 0x4f, 0x13, 0x41,
	0x14, 0xef, 0x22, 0x36, 0x30, 0x46, 0xfe, 0x8c, 0x84, 0xd4, 0x05, 0x16, 0xb2, 0xf8, 0x2f, 0x68,
	0x77, 0x2c, 0x4a, 0x62, 0xe2, 0xc1, 0x00, 0x81, 0x46, 0x0f, 0x06, 0xd7, 0x10, 0x12, 0x2f, 0xcd,
	0xb4, 0x3c, 0x96, 0x35, 0xdb, 0x9d, 0xa5, 0xb3, 0x0b, 0x56, 0xc2, 0xc5, 0x93, 0x47, 0x13, 0xaf,
	0x9e, 0xd5, 0x78, 0xf2, 0xe0, 0x07, 0xf0, 0x88, 0x37, 0xa2, 0x17, 0xbd, 0x18, 0x03, 0x26, 0x7e,
	0x01, 0x3f, 0x80, 0xe9, 0xce, 0xac, 0xdb, 0xed, 0x1f, 0x68, 0x13, 0x0f, 0x5e, 0x9a, 0xce, 0x7b,
	0xef, 0xf7, 0xde, 0xef, 0x37, 0xef, 0xbd, 0xc9, 0xa2, 0xf1, 0x4d, 0xea, 0x42, 0xe0, 0x90, 0x0d,
	0x00, 0x8f, 0x56, 0xc9, 0x76, 0x8e, 0x6c, 0x05, 0x50, 0xa9, 0x1a, 0x5e, 0x85, 0xf9, 0x0c, 0x0f,
	0x09, 0xaf, 0x21, 0xbc, 0xc6, 0x76, 0x4e, 0x1d, 0xa6, 0x65, 0xdb, 0x65, 0x24, 0xfc, 0x15, 0x41,
	0xea, 0x4c, 0x89, 0xf1, 0x32, 0xe3, 0xa4, 0x48, 0x39, 0x08, 0x34, 0xd9, 0xce, 0x15, 0xc1, 0xa7,
	0x39, 0xe2, 0x51, 0xcb, 0x76, 0xa9, 0x6f, 0x33, 0x57, 0xc6, 0x8e, 0xc9, 0xd8, 0x28, 0xac, 0xbe,
	0x9a, 0x7a, 0x5e, 0x38, 0x0b, 0xe1, 0x89, 0x88, 0x83, 0x74, 0x8d, 0x58, 0xcc, 0x62, 0xc2, 0x5e,
	0xfb, 0x27, 0xad, 0xe3, 0x16, 0x63, 0x96, 0x03, 0x84, 0x7a, 0x36, 0xa1, 0xae, 0xcb, 0xfc, 0xb0,
	0x54, 0x84, 0x99, 0x68, 0x92, 0x26, 0x65, 0x08, 0xb7, 0xd6, 0xe4, 0xb6, 0xc0, 0x05, 0x6e, 0x4b,
	0xb8, 0x4e, 0x91, 0xfa, 0xa0, 0x46, 0x6e, 0x19, 0x60, 0x85, 0x56, 0x17, 0x99, 0xeb, 0x57, 0x68,
	0xc9, 0x37, 0x61, 0x2b, 0x00, 0xee, 0xe3, 0x45, 0x34, 0x54, 0x92, 0xa6, 0x02, 0x5d, 0x5f, 0xaf,
	0x00, 0xe7, 0x19, 0x65, 0x4a, 0xb9, 0xd2, 0xbf, 0x90, 0xf9, 0xfc, 0x21, 0x3b, 0x22, 0xc9, 0xcf,
	0x0b, 0xcf, 0x43, 0xbf, 0x62, 0xbb, 0x96, 0x39, 0x18, 0x21, 0xa4, 0x59, 0xf7, 0xd1, 0x58, 0xcb,
	0x12, 0xdc, 0x63, 0x2e, 0x07, 0xbc, 0x8a, 0x86, 0x36, 0x00, 0x0a, 0x1e, 0xad, 0x16, 0x22, 0x64,
	0x58, 0xe3, 0xcc, 0xec, 0x94, 0xd1, 0xd8, 0x18, 0x23, 0x99, 0x63, 0xa1, 0x7f, 0xff, 0xfb, 0x64,
	0xea, 0xed, 0xaf, 0xf7, 0x33, 0x8a, 0x39, 0xb0, 0x91, 0x70, 0xe9, 0xd0, 0xb2, 0x2a, 0x8f, 0x94,
	0x2d, 0x23, 0x14, 0xb7, 0x4d, 0xd6, 0xbb, 0x64, 0x48, 0x41, 0xb5, 0x1e, 0x1b, 0xa2, 0x67, 0xb2,
	0xc7, 0xc6, 0x0a, 0xb5, 0x40, 0x62, 0xcd, 0x3a, 0xa4, 0xfe, 0x51, 0x41, 0xe3, 0xad, 0xeb, 0x48,
	0x79, 0x6b, 0x68, 0xb8, 0x51, 0x5e, 0xed, 0x0e, 0x4f, 0x75, 0xab, 0x6f, 0x30, 0xa9, 0x8f, 0xe3,
	0x7c, 0x42, 0x41, 0x4f, 0xa8, 0xe0, 0xf2, 0x89, 0x0a, 0x04, 0xab, 0x84, 0x84, 0xd7, 0x0a, 0xd2,
	0x5a, 0x48, 0x58, 0xe5, 0xc0, 0xff, 0xe5, 0x1c, 0xe0, 0x3b, 0x68, 0x60, 0x87, 0x3a, 0x0e, 0xc4,
	0x29, 0x7a, 0x4e, 0x48, 0x71, 0x56, 0xc4, 0x47, 0x83, 0x34, 0x87, 0x26, 0xdb, 0xf2, 0x94, 0xb7,
	0x8d, 0x51, 0x6f, 0xc0, 0x41, 0x90, 0xeb, 0x35, 0xc3, 0xff, 0xfa, 0x3b, 0x05, 0xe9, 0x75, 0xb8,
	0xb5, 0x30, 0xe7, 0x5d, 0xbe, 0xe4, 0xd8, 0x96, 0x5d, 0x74, 0xe0, 0xff, 0xd2, 0x38, 0x8f, 0xa6,
	0x8f, 0xe5, 0x2a, 0x75, 0xaa, 0xa8, 0x0f, 0xa4, 0x2d, 0x24, 0xd9, 0x67, 0xfe, 0x3d, 0xeb, 0x23,
	0x08, 0x87, 0x29, 0x56, 0x68, 0x85, 0x96, 0xa3, 0x16, 0xea, 0x26, 0x3a, 0x97, 0xb0, 0xca, 0x44,
	0xb7, 0x51, 0xda, 0x0b, 0x2d, 0x72, 0x07, 0x32, 0xcd, 0x33, 0x29, 0x10, 0xf5, 0xb3, 0x28, 0x21,
	0xb3, 0xbf, 0xd3, 0xe8, 0x74, 0x98, 0x14, 0xbf, 0x51, 0xd0, 0x40, 0xb2, 0x2d, 0xf8, 0x5a, 0x73,
	0xa6, 0xf6, 0x2f, 0x8d, 0x9a, 0xed, 0x30, 0x5a, 0xd0, 0xd6, 0x6f, 0x3d, 0xaf, 0x11, 0x79, 0xf6,
	0xe5, 0xe7, 0xcb, 0x9e, 0x2c, 0xbe, 0x4a, 0x1e, 0x07, 0x2e, 0xab, 0x7b, 0xe2, 0xa2, 0xae, 0x90,
	0xdd, 0xc6, 0x8e, 0xee, 0xe1, 0x57, 0x0a, 0x1a, 0x6c, 0xd8, 0x55, 0xdc, 0x59, 0xf1, 0xe8, 0x2a,
	0x55, 0xa3, 0xd3, 0x70, 0x49, 0x76, 0x26, 0x26, 0x3b, 0x89, 0x27, 0x1a, 0xc9, 0x52, 0xc7, 0x89,
	0x5f, 0x06, 0xfc, 0x49, 0x41, 0xb8, 0x79, 0xbe, 0xf1, 0xf5, 0x8e, 0x4a, 0xd6, 0xad, 0xac, 0x9a,
	0xeb, 0x02, 0x21, 0x79, 0xde, 0x8f, 0x79, 0x2e, 0xe2, 0xf9, 0x2e, 0x2e, 0x95, 0xd4, 0xf6, 0x8c,
	0xec, 0x26, 0x27, 0x7f, 0x0f, 0x7f, 0x53, 0xd0, 0x68, 0xeb, 0x39, 0xc6, 0x37, 0x8f, 0x65, 0xd7,
	0x66, 0x45, 0xd5, 0xb9, 0x2e, 0x51, 0x52, 0x97, 0x19, 0xeb, 0xca, 0xe3, 0xa5, 0x6e, 0x74, 0x45,
	0x3b, 0xd5, 0xac, 0xed, 0x29, 0x4a, 0x8b, 0xbd, 0xc0, 0x17, 0xda, 0x90, 0x4a, 0xac, 0x9f, 0x7a,
	0xf1, 0x84, 0x28, 0x49, 0x75, 0x3a, 0xa6, 0x9a, 0xc1, 0xa3, 0x8d, 0x54, 0xc5, 0xda, 0x2d, 0xe4,
	0xf7, 0x0f, 0x35, 0xe5, 0xe0, 0x50, 0x53, 0x7e, 0x1c, 0x6a, 0xca, 0x8b, 0x23, 0x2d, 0x75, 0x70,
	0xa4, 0xa5, 0xbe, 0x1e, 0x69, 0xa9, 0x47, 0x59, 0xcb, 0xf6, 0x37, 0x83, 0xa2, 0x51, 0x62, 0x65,
	0x92, 0x87, 0xc0, 0xdd, 0xdc, 0xa1, 0xf7, 0x80, 0xb9, 0x16, 0x91, 0x5f, 0x01, 0x4f, 0xa2, 0x64,
	0x7e, 0xd5, 0x03, 0x5e, 0x4c, 0x87, 0xdf, 0x00, 0x37, 0xfe, 0x04, 0x00, 0x00, 0xff, 0xff, 0x69,
	0xbd, 0xcc, 0xfb, 0x1f, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// FeePayContract queries a single fee pay contract by address
	FeePayContract(ctx context.Context, in *QueryFeePayContractRequest, opts ...grpc.CallOption) (*QueryFeePayContractResponse, error)
	// Retrieve all fee pay contracts
	FeePayContracts(ctx context.Context, in *QueryFeePayContractsRequest, opts ...grpc.CallOption) (*QueryFeePayContractsResponse, error)
	// Retrieve the number of uses on a fee pay contract by wallet
	FeePayContractUses(ctx context.Context, in *QueryFeePayContractUsesRequest, opts ...grpc.CallOption) (*QueryFeePayContractUsesResponse, error)
	// Query if sender is eligible for fee pay contract interaction
	FeePayWalletIsEligible(ctx context.Context, in *QueryFeePayWalletIsEligibleRequest, opts ...grpc.CallOption) (*QueryFeePayWalletIsEligibleResponse, error)
	// Params retrieves the FeePay module params
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) FeePayContract(ctx context.Context, in *QueryFeePayContractRequest, opts ...grpc.CallOption) (*QueryFeePayContractResponse, error) {
	out := new(QueryFeePayContractResponse)
	err := c.cc.Invoke(ctx, "/haneul.feepay.v1.Query/FeePayContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FeePayContracts(ctx context.Context, in *QueryFeePayContractsRequest, opts ...grpc.CallOption) (*QueryFeePayContractsResponse, error) {
	out := new(QueryFeePayContractsResponse)
	err := c.cc.Invoke(ctx, "/haneul.feepay.v1.Query/FeePayContracts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FeePayContractUses(ctx context.Context, in *QueryFeePayContractUsesRequest, opts ...grpc.CallOption) (*QueryFeePayContractUsesResponse, error) {
	out := new(QueryFeePayContractUsesResponse)
	err := c.cc.Invoke(ctx, "/haneul.feepay.v1.Query/FeePayContractUses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FeePayWalletIsEligible(ctx context.Context, in *QueryFeePayWalletIsEligibleRequest, opts ...grpc.CallOption) (*QueryFeePayWalletIsEligibleResponse, error) {
	out := new(QueryFeePayWalletIsEligibleResponse)
	err := c.cc.Invoke(ctx, "/haneul.feepay.v1.Query/FeePayWalletIsEligible", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/haneul.feepay.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// FeePayContract queries a single fee pay contract by address
	FeePayContract(context.Context, *QueryFeePayContractRequest) (*QueryFeePayContractResponse, error)
	// Retrieve all fee pay contracts
	FeePayContracts(context.Context, *QueryFeePayContractsRequest) (*QueryFeePayContractsResponse, error)
	// Retrieve the number of uses on a fee pay contract by wallet
	FeePayContractUses(context.Context, *QueryFeePayContractUsesRequest) (*QueryFeePayContractUsesResponse, error)
	// Query if sender is eligible for fee pay contract interaction
	FeePayWalletIsEligible(context.Context, *QueryFeePayWalletIsEligibleRequest) (*QueryFeePayWalletIsEligibleResponse, error)
	// Params retrieves the FeePay module params
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) FeePayContract(ctx context.Context, req *QueryFeePayContractRequest) (*QueryFeePayContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeePayContract not implemented")
}
func (*UnimplementedQueryServer) FeePayContracts(ctx context.Context, req *QueryFeePayContractsRequest) (*QueryFeePayContractsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeePayContracts not implemented")
}
func (*UnimplementedQueryServer) FeePayContractUses(ctx context.Context, req *QueryFeePayContractUsesRequest) (*QueryFeePayContractUsesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeePayContractUses not implemented")
}
func (*UnimplementedQueryServer) FeePayWalletIsEligible(ctx context.Context, req *QueryFeePayWalletIsEligibleRequest) (*QueryFeePayWalletIsEligibleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeePayWalletIsEligible not implemented")
}
func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_FeePayContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFeePayContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FeePayContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/haneul.feepay.v1.Query/FeePayContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FeePayContract(ctx, req.(*QueryFeePayContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FeePayContracts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFeePayContractsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FeePayContracts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/haneul.feepay.v1.Query/FeePayContracts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FeePayContracts(ctx, req.(*QueryFeePayContractsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FeePayContractUses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFeePayContractUsesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FeePayContractUses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/haneul.feepay.v1.Query/FeePayContractUses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FeePayContractUses(ctx, req.(*QueryFeePayContractUsesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FeePayWalletIsEligible_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFeePayWalletIsEligibleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FeePayWalletIsEligible(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/haneul.feepay.v1.Query/FeePayWalletIsEligible",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FeePayWalletIsEligible(ctx, req.(*QueryFeePayWalletIsEligibleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/haneul.feepay.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "haneul.feepay.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FeePayContract",
			Handler:    _Query_FeePayContract_Handler,
		},
		{
			MethodName: "FeePayContracts",
			Handler:    _Query_FeePayContracts_Handler,
		},
		{
			MethodName: "FeePayContractUses",
			Handler:    _Query_FeePayContractUses_Handler,
		},
		{
			MethodName: "FeePayWalletIsEligible",
			Handler:    _Query_FeePayWalletIsEligible_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "haneul/feepay/v1/query.proto",
}

func (m *QueryFeePayContractRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFeePayContractRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFeePayContractRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFeePayContractResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFeePayContractResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFeePayContractResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.FeePayContract.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryFeePayContractsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFeePayContractsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFeePayContractsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFeePayContractsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFeePayContractsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFeePayContractsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.FeePayContracts) > 0 {
		for iNdEx := len(m.FeePayContracts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FeePayContracts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryFeePayContractUsesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFeePayContractUsesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFeePayContractUsesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WalletAddress) > 0 {
		i -= len(m.WalletAddress)
		copy(dAtA[i:], m.WalletAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.WalletAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFeePayContractUsesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFeePayContractUsesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFeePayContractUsesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Uses != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Uses))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryFeePayWalletIsEligibleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFeePayWalletIsEligibleRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFeePayWalletIsEligibleRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WalletAddress) > 0 {
		i -= len(m.WalletAddress)
		copy(dAtA[i:], m.WalletAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.WalletAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFeePayWalletIsEligibleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFeePayWalletIsEligibleResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFeePayWalletIsEligibleResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Eligible {
		i--
		if m.Eligible {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryFeePayContractRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFeePayContractResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.FeePayContract.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryFeePayContractsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFeePayContractsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FeePayContracts) > 0 {
		for _, e := range m.FeePayContracts {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFeePayContractUsesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.WalletAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFeePayContractUsesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uses != 0 {
		n += 1 + sovQuery(uint64(m.Uses))
	}
	return n
}

func (m *QueryFeePayWalletIsEligibleRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.WalletAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFeePayWalletIsEligibleResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Eligible {
		n += 2
	}
	return n
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryFeePayContractRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFeePayContractRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFeePayContractRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFeePayContractResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFeePayContractResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFeePayContractResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeePayContract", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeePayContract.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFeePayContractsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFeePayContractsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFeePayContractsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFeePayContractsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFeePayContractsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFeePayContractsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeePayContracts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeePayContracts = append(m.FeePayContracts, FeePayContract{})
			if err := m.FeePayContracts[len(m.FeePayContracts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFeePayContractUsesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFeePayContractUsesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFeePayContractUsesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WalletAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFeePayContractUsesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFeePayContractUsesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFeePayContractUsesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uses", wireType)
			}
			m.Uses = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uses |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFeePayWalletIsEligibleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFeePayWalletIsEligibleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFeePayWalletIsEligibleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WalletAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFeePayWalletIsEligibleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFeePayWalletIsEligibleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFeePayWalletIsEligibleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Eligible", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Eligible = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
